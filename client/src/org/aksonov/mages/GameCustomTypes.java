/*** * Mages: Multiplayer Game Engine for mobile devices * Copyright (C) 2008 aksonov *  * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2 of the License, or (at your option) any later version. *  * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. *  * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  * Contact: aksonov dot gmail dot com * * Author: Pavlo Aksonov */package org.aksonov.mages;import java.io.DataInputStream;import java.io.DataOutputStream;import java.util.Hashtable;import org.aksonov.mages.entities.GameSettings;import org.aksonov.mages.entities.Move;import org.aksonov.mages.entities.Note;import org.aksonov.mages.entities.PlayerInfo;import org.aksonov.tools.Log;import org.mega.gasp.moods.CustomTypes;// TODO: Auto-generated Javadoc/** * Encoder/decoder for used game entities * @author Pavel *  */public class GameCustomTypes implements CustomTypes, MoodsSerializer {	// types	/** The TYP e_ move. */	public final byte TYPE_MOVE = -1;		/** The TYP e_ player. */	public final byte TYPE_PLAYER = -2;		/** The TYP e_ notification. */	public final byte TYPE_NOTIFICATION = -3;		/** The TYP e_ gamesettings. */	public final byte TYPE_GAMESETTINGS = -4;	/* (non-Javadoc)	 * @see org.mega.gasp.moods.CustomTypes#encodeData(java.util.Hashtable, java.io.DataOutputStream)	 */	public void encodeData(Hashtable h, DataOutputStream dos) throws Exception {		encodeData(1200, h, dos);	}	// encodeData root method	/**	 * Encode data.	 * 	 * @param id the id	 * @param h the h	 * @param dos the dos	 * 	 * @throws Exception the exception	 */	public void encodeData(int id, Hashtable h, DataOutputStream dos)			throws Exception {		dos.writeShort(id);		dos.writeShort(h.size());		int nbSend = h.size();		for (int i = 0; i < nbSend; i++) {			Object o = h.get("" + i);			encodeObject(dos, o);		}	}	/**	 * Encode object.	 * 	 * @param dos the dos	 * @param o the o	 * 	 * @throws Exception the exception	 */	private void encodeObject(DataOutputStream dos, Object o) throws Exception {		if (o instanceof Move) {			dos.writeByte(TYPE_MOVE);			encodeMove(dos, ((Move) o));		}		if (o instanceof PlayerInfo) {			dos.writeByte(TYPE_PLAYER);			encodePlayer(dos, ((PlayerInfo) o));		}		if (o instanceof GameSettings) {			dos.writeByte(TYPE_GAMESETTINGS);			encodeGameSettings(dos, ((GameSettings) o));		}		if (o instanceof Note) {			dos.writeByte(TYPE_NOTIFICATION);			encodeNotification(dos, ((Note) o));		}	}	// decodeData rooy method	/* (non-Javadoc)	 * @see org.mega.gasp.moods.CustomTypes#decodeData(java.io.DataInputStream)	 */	public Hashtable decodeData(DataInputStream dis) throws Exception {		dis.readShort();		Hashtable h = new Hashtable();		short nb = dis.readShort();		Log.d("GameCustomTypes", "decodeData, number of objects = " + nb);		int nbObj = nb;		while (nb != 0) {			String key = "" + (nbObj - nb);			h.put(key, decodeObject(dis));			nb--;		}		return h;	}	/**	 * Decode object.	 * 	 * @param dis the dis	 * 	 * @return the object	 * 	 * @throws Exception the exception	 */	private Object decodeObject(DataInputStream dis) throws Exception {		byte type = dis.readByte();		if (type == TYPE_MOVE) {			Move customType = decodeMove(dis);			return customType;		}		if (type == TYPE_PLAYER) {			PlayerInfo customType = decodePlayer(dis);			return customType;		}		if (type == TYPE_GAMESETTINGS) {			GameSettings customType = decodeGameSettings(dis);			return customType;		}		if (type == TYPE_NOTIFICATION) {			Note customType = decodeNotification(dis);			return customType;		}		return null;	}	// encoding method for each custom type	/**	 * Encode move.	 * 	 * @param dos the dos	 * @param customType the custom type	 * 	 * @throws Exception the exception	 */	private void encodeMove(DataOutputStream dos, Move customType)			throws Exception {		dos.writeByte(customType.player);		dos.writeInt(customType.id);		dos.writeInt(customType.time);		dos.writeInt(customType.data.length);		dos.write(customType.data);		//Move.dispose(customType);	}	/**	 * Encode player.	 * 	 * @param dos the dos	 * @param customType the custom type	 * 	 * @throws Exception the exception	 */	private void encodePlayer(DataOutputStream dos, PlayerInfo customType)			throws Exception {		dos.writeByte(customType.getPlayer());		dos.writeInt(customType.getId());		dos.writeUTF(customType.getUsername());		dos.writeInt(customType.rating);		dos.writeInt(customType.arg1);		dos.writeInt(customType.arg2);		dos.writeInt(customType.gameId);		//PlayerInfo.dispose(customType);	}	// decoding method for each custom type	/**	 * Decode move.	 * 	 * @param dis the dis	 * 	 * @return the move	 * 	 * @throws Exception the exception	 */	public Move decodeMove(DataInputStream dis) throws Exception {		Move customType = Move.create();		customType.player = dis.readByte();		customType.id = dis.readInt();		customType.time = dis.readInt();		int size = dis.readInt();		byte[] data = new byte[size];		dis.read(data);		customType.data = data;		return customType;	}	/**	 * Decode notification.	 * 	 * @param dis the dis	 * 	 * @return the note	 * 	 * @throws Exception the exception	 */	public Note decodeNotification(DataInputStream dis)			throws Exception {		Note customType = Note.create();		customType.arg1 = dis.readInt();		customType.arg2 = dis.readInt();		customType.who = dis.readInt();		customType.type = dis.readByte();		customType.reason = dis.readByte();		customType.message = dis.readUTF();		return customType;	}	/**	 * Decode player.	 * 	 * @param dis the dis	 * 	 * @return the player info	 * 	 * @throws Exception the exception	 */	public PlayerInfo decodePlayer(DataInputStream dis) throws Exception {		PlayerInfo customType = PlayerInfo.create();		customType.setPlayer(dis.readByte());		customType.setId(dis.readInt());		customType.setUsername(dis.readUTF());		customType.rating = dis.readInt();		customType.arg1 = dis.readInt();		customType.arg2 = dis.readInt();		customType.gameId = dis.readInt();				return customType;	}	/* (non-Javadoc)	 * @see org.aksonov.mages.MoodsSerializer#decodeObjects(java.io.DataInputStream)	 */		public Object[] decodeObjects(DataInputStream dis) throws Exception {		dis.readShort();		short nb = dis.readShort();		Object[] res = new Object[nb];		for (int i = 0; i < nb; i++) {			res[i] = decodeObject(dis);		}		return res;	}	/* (non-Javadoc)	 * @see org.aksonov.mages.MoodsSerializer#encodeObjects(java.lang.Object[], java.io.DataOutputStream)	 */		public void encodeObjects(Object[] data, DataOutputStream dos)			throws Exception {		dos.writeShort(1200);		Log.d("GameCustomTypes", "encodeObjects: " + data.length);		dos.writeShort(data.length);		for (int i = 0; i < data.length; i++) {			encodeObject(dos, data[i]);		}	}	/**	 * Encode game settings.	 * 	 * @param dos the dos	 * @param customType the custom type	 * 	 * @throws Exception the exception	 */	private void encodeGameSettings(DataOutputStream dos,			GameSettings customType) throws Exception {		Log.d("GameCustomTypes", "encodeGameSettings " + customType);		dos.writeInt(customType.id);		dos.writeInt(customType.timePerMove);		dos.writeInt(customType.timePerGame);		dos.writeInt(customType.moveIncr);		dos.writeInt(customType.arg1);		dos.writeInt(customType.arg2);		dos.writeBoolean(customType.rated);		int size = customType.players.size();		Log.d("GameCustomTypes", "Writing " + size + " players ");		dos.writeInt(size);		for (int i = 0; i < size; i++) {			encodePlayer(dos, customType.players.get(i));		}		size = customType.moves.size();		dos.writeInt(size);		for (int i = 0; i < size; i++) {			encodeMove(dos, customType.moves.get(i));		}		//GameSettings.dispose(customType);	}	/**	 * Encode notification.	 * 	 * @param dos the dos	 * @param customType the custom type	 * 	 * @throws Exception the exception	 */	private void encodeNotification(DataOutputStream dos,			Note customType) throws Exception {		dos.writeInt(customType.arg1);		dos.writeInt(customType.arg2);		dos.writeInt(customType.who);		dos.writeByte(customType.type);		dos.writeByte(customType.reason);		dos.writeUTF(customType.message);		Note.dispose(customType);	}	/**	 * Decode game settings.	 * 	 * @param dis the dis	 * 	 * @return the game settings	 * 	 * @throws Exception the exception	 */	public GameSettings decodeGameSettings(DataInputStream dis)			throws Exception {		GameSettings customType = GameSettings.create();		customType.id = dis.readInt();		customType.timePerMove = dis.readInt();		customType.timePerGame = dis.readInt();		customType.moveIncr = dis.readInt();		customType.arg1 = dis.readInt();		customType.arg2 = dis.readInt();		customType.rated = dis.readBoolean();				int size = dis.readInt();		Log.d("GameCustomTypes", "Reading " + size + " players ");		for (int i = 0; i < size; i++) {			customType.players.add(decodePlayer(dis));		}		size = dis.readInt();		for (int i = 0; i < size; i++) {			customType.moves.add(decodeMove(dis));		}		Log.d("GameCustomTypes", "decodeGameSettings: " + customType );		return customType;	}}